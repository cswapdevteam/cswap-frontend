{"ast":null,"code":"import BigNumber from 'bignumber.js';\nimport erc20 from 'config/abi/erc20.json';\nimport masterchefABI from 'config/abi/masterchef.json';\nimport multicall from 'utils/multicall';\nimport { getMasterChefAddress } from 'utils/addressHelpers';\nimport farmsConfig from 'config/constants/farms';\nimport { QuoteToken } from '../../config/constants/types';\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID;\n\nconst valueinBTC = async () => {\n  const farmConfig = farmsConfig.find(f => f.tokenSymbol === \"WBTC\");\n  const lpAdress = farmConfig.lpAddresses[CHAIN_ID];\n  const calls = [// Balance of token in the LP contract\n  {\n    address: farmConfig.tokenAddresses[CHAIN_ID],\n    name: 'balanceOf',\n    params: [lpAdress]\n  }, // Balance of quote token on LP contract\n  {\n    address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n    name: 'balanceOf',\n    params: [lpAdress]\n  }, // Balance of LP tokens in the master chef contract\n  {\n    address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAdress,\n    name: 'balanceOf',\n    params: [getMasterChefAddress()]\n  }, // Total supply of LP tokens\n  {\n    address: lpAdress,\n    name: 'totalSupply'\n  }, // Token decimals\n  {\n    address: farmConfig.tokenAddresses[CHAIN_ID],\n    name: 'decimals'\n  }, // Quote token decimals\n  {\n    address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n    name: 'decimals'\n  }];\n  const [tokenBalanceLP, quoteTokenBlanceLP, lpTokenBalanceMC, lpTotalSupply, tokenDecimals, quoteTokenDecimals] = await multicall(erc20, calls);\n  const tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP)).times(new BigNumber(10).pow(2));\n  return tokenPriceVsQuote.toNumber();\n};\n\nconst fetchFarms = async () => {\n  const data = await Promise.all(farmsConfig.map(async farmConfig => {\n    const lpAdress = farmConfig.lpAddresses[CHAIN_ID];\n    const calls = [// Balance of token in the LP contract\n    {\n      address: farmConfig.tokenAddresses[CHAIN_ID],\n      name: 'balanceOf',\n      params: [lpAdress]\n    }, // Balance of quote token on LP contract\n    {\n      address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n      name: 'balanceOf',\n      params: [lpAdress]\n    }, // Balance of LP tokens in the master chef contract\n    {\n      address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAdress,\n      name: 'balanceOf',\n      params: [getMasterChefAddress()]\n    }, // Total supply of LP tokens\n    {\n      address: lpAdress,\n      name: 'totalSupply'\n    }, // Token decimals\n    {\n      address: farmConfig.tokenAddresses[CHAIN_ID],\n      name: 'decimals'\n    }, // Quote token decimals\n    {\n      address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n      name: 'decimals'\n    }];\n    const [tokenBalanceLP, quoteTokenBlanceLP, lpTokenBalanceMC, lpTotalSupply, tokenDecimals, quoteTokenDecimals] = await multicall(erc20, calls);\n    let tokenAmount;\n    let lpTotalInQuoteToken;\n    let tokenPriceVsQuote;\n\n    if (farmConfig.isTokenOnly) {\n      tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(tokenDecimals)); // if (farmConfig.tokenSymbol === QuoteToken.BUSD && farmConfig.quoteTokenSymbol === QuoteToken.BUSD) {\n\n      if ((farmConfig.tokenSymbol === QuoteToken.CSWAP || farmConfig.tokenSymbol === QuoteToken.WMATIC || farmConfig.tokenSymbol === QuoteToken.QUICK || farmConfig.tokenSymbol === QuoteToken.WETH) && farmConfig.quoteTokenSymbol === QuoteToken.BUSD) {\n        tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP)).times(new BigNumber(10).pow(12));\n      } else if (farmConfig.tokenSymbol === QuoteToken.WBTC) {\n        tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP)).times(new BigNumber(10).pow(2));\n      } else {\n        tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\n      } // ??? ERROR\n\n\n      lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote);\n    } else {\n      // Ratio in % a LP tokens that are in staking, vs the total number in circulation\n      const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply)); // Total value in staking in quote token value\n      // lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(10).pow(quoteTokenDecimals))\n      // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\n\n      tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio);\n      const quoteTokenAmount = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(10).pow(quoteTokenDecimals)).times(lpTokenRatio);\n\n      if (tokenAmount.comparedTo(0) > 0) {\n        tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount);\n      } else {\n        tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\n      } // Total value in staking in quote token value\n\n\n      lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote);\n    }\n\n    const [info, totalAllocPoint, eggPerBlock] = await multicall(masterchefABI, [{\n      address: getMasterChefAddress(),\n      name: 'poolInfo',\n      params: [farmConfig.pid]\n    }, {\n      address: getMasterChefAddress(),\n      name: 'totalAllocPoint'\n    }, {\n      address: getMasterChefAddress(),\n      name: 'eggPerBlock'\n    }]);\n    const allocPoint = new BigNumber(info.allocPoint._hex);\n    const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint));\n    return { ...farmConfig,\n      tokenAmount: tokenAmount.toJSON(),\n      // quoteTokenAmount: quoteTokenAmount,\n      lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\n      lpTotalInBTC: lpTotalInQuoteToken.div(await valueinBTC()).toJSON(),\n      tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\n      poolWeight: poolWeight.toNumber(),\n      multiplier: `${allocPoint.div(100).toString()}X`,\n      depositFeeBP: info.depositFeeBP,\n      eggPerBlock: new BigNumber(eggPerBlock).toNumber()\n    };\n  })); // console.log('data: ', data)\n\n  return data;\n};\n\nexport default fetchFarms;","map":{"version":3,"sources":["C:/Users/lol/Desktop/cswap-core/cswap-frontend/src/state/farms/fetchFarms.ts"],"names":["BigNumber","erc20","masterchefABI","multicall","getMasterChefAddress","farmsConfig","QuoteToken","CHAIN_ID","process","env","REACT_APP_CHAIN_ID","valueinBTC","farmConfig","find","f","tokenSymbol","lpAdress","lpAddresses","calls","address","tokenAddresses","name","params","quoteTokenAdresses","isTokenOnly","tokenBalanceLP","quoteTokenBlanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","tokenPriceVsQuote","div","times","pow","toNumber","fetchFarms","data","Promise","all","map","tokenAmount","lpTotalInQuoteToken","CSWAP","WMATIC","QUICK","WETH","quoteTokenSymbol","BUSD","WBTC","lpTokenRatio","quoteTokenAmount","comparedTo","info","totalAllocPoint","eggPerBlock","pid","allocPoint","_hex","poolWeight","toJSON","lpTotalInBTC","multiplier","toString","depositFeeBP"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\r\nimport erc20 from 'config/abi/erc20.json'\r\nimport masterchefABI from 'config/abi/masterchef.json'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport { QuoteToken } from '../../config/constants/types'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\nconst valueinBTC = async() => {\r\n  const farmConfig = farmsConfig.find(f=>f.tokenSymbol===\"WBTC\");\r\n  const lpAdress = farmConfig.lpAddresses[CHAIN_ID]\r\n  const calls = [\r\n    // Balance of token in the LP contract\r\n    {\r\n      address: farmConfig.tokenAddresses[CHAIN_ID],\r\n      name: 'balanceOf',\r\n      params: [lpAdress],\r\n    },\r\n    // Balance of quote token on LP contract\r\n    {\r\n      address: farmConfig.quoteTokenAdresses[CHAIN_ID],\r\n      name: 'balanceOf',\r\n      params: [lpAdress],\r\n    },\r\n    // Balance of LP tokens in the master chef contract\r\n    {\r\n      address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAdress,\r\n      name: 'balanceOf',\r\n      params: [getMasterChefAddress()],\r\n    },\r\n    // Total supply of LP tokens\r\n    {\r\n      address: lpAdress,\r\n      name: 'totalSupply',\r\n    },\r\n    // Token decimals\r\n    {\r\n      address: farmConfig.tokenAddresses[CHAIN_ID],\r\n      name: 'decimals',\r\n    },\r\n    // Quote token decimals\r\n    {\r\n      address: farmConfig.quoteTokenAdresses[CHAIN_ID],\r\n      name: 'decimals',\r\n    },\r\n  ]\r\n\r\n  const [\r\n    tokenBalanceLP,\r\n    quoteTokenBlanceLP,\r\n    lpTokenBalanceMC,\r\n    lpTotalSupply,\r\n    tokenDecimals,\r\n    quoteTokenDecimals,\r\n  ] = await multicall(erc20, calls)\r\n\r\n  const tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP)).times(new BigNumber(10).pow(2))\r\n\r\n  return(tokenPriceVsQuote.toNumber())\r\n\r\n}\r\n\r\nconst fetchFarms = async () => {\r\n  \r\n  const data = await Promise.all(\r\n    farmsConfig.map(async (farmConfig) => {\r\n      const lpAdress = farmConfig.lpAddresses[CHAIN_ID]\r\n      const calls = [\r\n        // Balance of token in the LP contract\r\n        {\r\n          address: farmConfig.tokenAddresses[CHAIN_ID],\r\n          name: 'balanceOf',\r\n          params: [lpAdress],\r\n        },\r\n        // Balance of quote token on LP contract\r\n        {\r\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\r\n          name: 'balanceOf',\r\n          params: [lpAdress],\r\n        },\r\n        // Balance of LP tokens in the master chef contract\r\n        {\r\n          address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAdress,\r\n          name: 'balanceOf',\r\n          params: [getMasterChefAddress()],\r\n        },\r\n        // Total supply of LP tokens\r\n        {\r\n          address: lpAdress,\r\n          name: 'totalSupply',\r\n        },\r\n        // Token decimals\r\n        {\r\n          address: farmConfig.tokenAddresses[CHAIN_ID],\r\n          name: 'decimals',\r\n        },\r\n        // Quote token decimals\r\n        {\r\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\r\n          name: 'decimals',\r\n        },\r\n      ]\r\n\r\n      const [\r\n        tokenBalanceLP,\r\n        quoteTokenBlanceLP,\r\n        lpTokenBalanceMC,\r\n        lpTotalSupply,\r\n        tokenDecimals,\r\n        quoteTokenDecimals,\r\n      ] = await multicall(erc20, calls)\r\n\r\n\r\n\r\n    \r\n      let tokenAmount\r\n      let lpTotalInQuoteToken\r\n      let tokenPriceVsQuote\r\n\r\n\r\n      \r\n      if (farmConfig.isTokenOnly) {\r\n        tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(tokenDecimals))\r\n        // if (farmConfig.tokenSymbol === QuoteToken.BUSD && farmConfig.quoteTokenSymbol === QuoteToken.BUSD) {\r\n          if((farmConfig.tokenSymbol === QuoteToken.CSWAP || farmConfig.tokenSymbol === QuoteToken.WMATIC || farmConfig.tokenSymbol === QuoteToken.QUICK || farmConfig.tokenSymbol === QuoteToken.WETH)&& farmConfig.quoteTokenSymbol === QuoteToken.BUSD)\r\n          {\r\n           tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP)).times(new BigNumber(10).pow(12))\r\n         }\r\n         else if (farmConfig.tokenSymbol === QuoteToken.WBTC) {\r\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP)).times(new BigNumber(10).pow(2))\r\n         } \r\n        else {\r\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP))\r\n        }\r\n\r\n        // ??? ERROR\r\n        lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote)\r\n      }\r\n      else {\r\n        // Ratio in % a LP tokens that are in staking, vs the total number in circulation\r\n        const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\r\n        // Total value in staking in quote token value\r\n        // lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(10).pow(quoteTokenDecimals))\r\n\r\n        // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\r\n        tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio)\r\n        const quoteTokenAmount = new BigNumber(quoteTokenBlanceLP)\r\n           .div(new BigNumber(10).pow(quoteTokenDecimals))\r\n           .times(lpTokenRatio)\r\n\r\n        if (tokenAmount.comparedTo(0) > 0) {\r\n          tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount)\r\n        } else {\r\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP))\r\n        }\r\n\r\n        // Total value in staking in quote token value\r\n        lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote)\r\n      }\r\n      \r\n      const [info, totalAllocPoint, eggPerBlock] = await multicall(masterchefABI, [\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'poolInfo',\r\n          params: [farmConfig.pid],\r\n        },\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'totalAllocPoint',\r\n        },\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'eggPerBlock',\r\n        },\r\n      ])\r\n\r\n      const allocPoint = new BigNumber(info.allocPoint._hex)\r\n      const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint))\r\n\r\n      return {\r\n        ...farmConfig,\r\n        tokenAmount: tokenAmount.toJSON(),\r\n        // quoteTokenAmount: quoteTokenAmount,\r\n        lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\r\n        lpTotalInBTC: lpTotalInQuoteToken.div(await valueinBTC()).toJSON(),\r\n        tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\r\n        poolWeight: poolWeight.toNumber(),\r\n        multiplier: `${allocPoint.div(100).toString()}X`,\r\n        depositFeeBP: info.depositFeeBP,\r\n        eggPerBlock: new BigNumber(eggPerBlock).toNumber(),\r\n      }\r\n    }),\r\n  )\r\n  // console.log('data: ', data)\r\n  return data\r\n}\r\n\r\nexport default fetchFarms\r\n"]},"metadata":{},"sourceType":"module"}